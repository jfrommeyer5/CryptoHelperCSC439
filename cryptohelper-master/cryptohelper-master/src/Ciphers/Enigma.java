package Ciphers;

import java.awt.event.ActionEvent;
import java.text.CharacterIterator;
import java.text.StringCharacterIterator;
import java.util.ArrayList;

public class Enigma extends BaseCipher{

	public static void main(String[] args) {
		Plugboard pbr = new Plugboard("ZYXWVUTSRQPONMLKJIHGFEDCBA");
		Plugboard pbn = new Plugboard();
		Reflector rf = new ReflectorB();
		Rotor[] rotorArr = new Rotor[3];
		Rotor[] temp = new Rotor[3];
		temp[0] = new Rotor1(1);
		temp[1] = new Rotor2(2);
		temp[2] = new Rotor3(3);

		for(int i = 0; i < 3; i++) {
			rotorArr[temp[i].getPos()-1] = temp[i];
		}

		String a = "AAAAAAAAAAAAAAAAAAAAAAAAA";
		String msg = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String out = "";
		CharacterIterator iter = new StringCharacterIterator(a);

		//		/*
		//		 * Begin Black Box Equivalence Class and Boundary Value Testing Hybrid
		//		 */
		//		System.out.println("Begin Black Box Equivalence Class and Boundary Value Testing Hybrid");
		//		for(int i = 0; i < 26; i++) {
		//			for(int j = 0; j < 26; j++) {
		//				while(iter.current() != CharacterIterator.DONE) {
		//					if(rotorArr[0].rotate()) {
		//						if(rotorArr[1].rotate()) {
		//							rotorArr[2].rotate();
		//						}
		//					}
		//					if(rotorArr[0].getStep() == 1 || rotorArr[0].getStep() == 26 || rotorArr[0].getStep() == 0 || rotorArr[0].getStep() == 16) {
		//						char test = pbn.encrypt(
		//								rotorArr[0].decrypt(
		//										rotorArr[1].decrypt(
		//												rotorArr[2].decrypt(
		//														rf.encrypt(
		//																rotorArr[2].encrypt(
		//																		rotorArr[1].encrypt(
		//																				rotorArr[0].encrypt(
		//																						pbn.encrypt(
		//																								pbn.encrypt(
		//																										rotorArr[0].decrypt(
		//																												rotorArr[1].decrypt(
		//																														rotorArr[2].decrypt(
		//																																rf.encrypt(
		//																																		rotorArr[2].encrypt(
		//																																				rotorArr[1].encrypt(
		//																																						rotorArr[0].encrypt(
		//																																								pbn.encrypt(
		//																																										iter.current()))))))))))))))))));
		//						if(test == 'A') System.out.println(rotorArr[0].getStep() + ": True");
		//					}
		//					iter.next();
		//				}
		//				iter.first();
		//			}
		//		}
		//		System.out.println();
		//
		//		for(int i = 0; i < 3; i++)
		//			rotorArr[i].reset();
		//		/*
		//		 * End Black Box Equivalence Class and Boundary Value Testing Hybrid
		//		 */
		//
		//		/*
		//		 * Begin Testing over every rotor position
		//		 */
		//		System.out.println("Begin Testing over every rotor position");
		//		for(int i = 0; i < 26; i++) {
		//			for(int j = 0; j < 26; j++) {
		//				while(iter.current() != CharacterIterator.DONE) {
		//					if(rotorArr[0].rotate()) {
		//						if(rotorArr[1].rotate()) {
		//							rotorArr[2].rotate();
		//						}
		//					}
		//					char test = pbn.encrypt(
		//							rotorArr[0].decrypt(
		//									rotorArr[1].decrypt(
		//											rotorArr[2].decrypt(
		//													rf.encrypt(
		//															rotorArr[2].encrypt(
		//																	rotorArr[1].encrypt(
		//																			rotorArr[0].encrypt(
		//																					pbn.encrypt(
		//																							pbn.encrypt(
		//																									rotorArr[0].decrypt(
		//																											rotorArr[1].decrypt(
		//																													rotorArr[2].decrypt(
		//																															rf.encrypt(
		//																																	rotorArr[2].encrypt(
		//																																			rotorArr[1].encrypt(
		//																																					rotorArr[0].encrypt(
		//																																							pbn.encrypt(
		//																																									iter.current()))))))))))))))))));
		//					if(test == 'A') System.out.println(rotorArr[0].getStep() + ": True");
		//					iter.next();
		//				}
		//				iter.first();
		//			}
		//		}
		//		System.out.println();
		//
		//		for(int i = 0; i < 3; i++)
		//			rotorArr[i].reset();
		//		/*
		//		 * Begin Testing over every rotor position
		//		 */
		//
		//		/*
		//		 * Begin Per Rotor Testing
		//		 * Encrypt then decrypt to see if A is returned
		//		 */
		//		System.out.println("Begin Per Rotor Testing");
		//		for(int x = 0; x < 3; x++) {
		//			while(iter.current() != CharacterIterator.DONE) {
		//				char test;
		//				rotorArr[x].rotate();
		//				test = rotorArr[x].decrypt(rotorArr[x].encrypt(iter.current()));
		//				if(test == 'A') System.out.println(x + ": " + rotorArr[x].getStep() + ": True");
		//
		//				iter.next();
		//			}
		//			iter.first();
		//			rotorArr[x].reset();
		//		}
		//		System.out.println();
		//		/*
		//		 * End Per Rotor Testing
		//		 */

		/*
		 * Begin Full System Output over every rotor step position
		 */
		System.out.println("Begin Full System Output over every rotor step position");

		for(int i = 0; i < 26; i++) {
			for(int j = 0; j < 26; j++) {
				while(iter.current() != CharacterIterator.DONE) {
					if(rotorArr[0].rotate()) {
						if(rotorArr[1].rotate()) {
							rotorArr[2].rotate();
						}
					}
					System.out.print(
							pbn.encrypt(
									rotorArr[0].decrypt(
											rotorArr[1].decrypt(
													rotorArr[2].decrypt(
															rf.encrypt(
																	rotorArr[2].encrypt(
																			rotorArr[1].encrypt(
																					rotorArr[0].encrypt(
																							pbn.encrypt(
																									iter.current()))))))))) + "");
					iter.next();
				}
				iter.first();
			}
		}
		System.out.println();

		for(int i = 0; i < 3; i++)
			rotorArr[i].reset();

		iter = new StringCharacterIterator(out);

		while(iter.current() != CharacterIterator.DONE) {
			if(rotorArr[0].rotate()) {
				if(rotorArr[1].rotate()) {
					rotorArr[2].rotate();
				}
			}
			System.out.print(
					pbn.encrypt(
							rotorArr[0].decrypt(
									rotorArr[1].decrypt(
											rotorArr[2].decrypt(
													rf.encrypt(
															rotorArr[2].encrypt(
																	rotorArr[1].encrypt(
																			rotorArr[0].encrypt(
																					pbn.encrypt(
																							iter.current()))))))))) + "");
			iter.next();
		}
		System.out.println("\n");
		
		for(int i = 0; i < 3; i++)
			rotorArr[i].reset();
		/*
		 * End Full System Output over every rotor step position
		 */
		

		/*
		 * Begin ABC Test
		 */
		iter = new StringCharacterIterator(msg);
		String out2 = "";
		System.out.println("Begin ABC Test");

		for(int i = 0; i < 26; i++) {
			for(int j = 0; j < 26; j++) {
				while(iter.current() != CharacterIterator.DONE) {
					if(rotorArr[0].rotate()) {
						if(rotorArr[1].rotate()) {
							rotorArr[2].rotate();
						}
					}
					System.out.print(
							pbn.encrypt(
									rotorArr[0].decrypt(
											rotorArr[1].decrypt(
													rotorArr[2].decrypt(
															rf.encrypt(
																	rotorArr[2].encrypt(
																			rotorArr[1].encrypt(
																					rotorArr[0].encrypt(
																							pbn.encrypt(
																									iter.current()))))))))) + "");
					iter.next();
				}
				iter.first();
			}
		}
		System.out.println();

		for(int i = 0; i < 3; i++)
			rotorArr[i].reset();

		iter = new StringCharacterIterator(out2);
		int counter = 0;
		
		while(iter.current() != CharacterIterator.DONE) {
			if(rotorArr[0].rotate()) {
				if(rotorArr[1].rotate()) {
					rotorArr[2].rotate();
				}
			}
			System.out.print(
					pbn.encrypt(
							rotorArr[0].decrypt(
									rotorArr[1].decrypt(
											rotorArr[2].decrypt(
													rf.encrypt(
															rotorArr[2].encrypt(
																	rotorArr[1].encrypt(
																			rotorArr[0].encrypt(
																					pbn.encrypt(
																							iter.current()))))))))) + "");
			iter.next();
			if((++counter)%26 == 0) System.out.println();
		}
		/*
		 * End ABC Test
		 */
		
		/*
		 * Begin Full System Output over every rotor step position
		 */
		iter = new StringCharacterIterator(a);
		System.out.println("Begin Full System Output over every rotor step position");

		for(int i = 0; i < 26; i++) {
			for(int j = 0; j < 26; j++) {
				while(iter.current() != CharacterIterator.DONE) {
					if(rotorArr[0].rotate()) {
						if(rotorArr[1].rotate()) {
							rotorArr[2].rotate();
						}
					}
					//System.out.print(iter.current() + "\t>\t");
					System.out.print(
							pbr.encrypt(
									rotorArr[0].decrypt(
											rotorArr[1].decrypt(
													rotorArr[2].decrypt(
															rf.encrypt(
																	rotorArr[2].encrypt(
																			rotorArr[1].encrypt(
																					rotorArr[0].encrypt(
																							pbr.encrypt(
																									iter.current()))))))))) + "");
					iter.next();
				}
				iter.first();
			}
		}
		System.out.println();

		for(int i = 0; i < 3; i++)
			rotorArr[i].reset();

		String out3 = "";
		iter = new StringCharacterIterator(out3);

		while(iter.current() != CharacterIterator.DONE) {
			if(rotorArr[0].rotate()) {
				if(rotorArr[1].rotate()) {
					rotorArr[2].rotate();
				}
			}
			//System.out.print(iter.current() + "\t>\t");
			System.out.print(
					pbr.encrypt(
							rotorArr[0].decrypt(
									rotorArr[1].decrypt(
											rotorArr[2].decrypt(
													rf.encrypt(
															rotorArr[2].encrypt(
																	rotorArr[1].encrypt(
																			rotorArr[0].encrypt(
																					pbr.encrypt(
																							iter.current()))))))))) + "");
			iter.next();
		}
		System.out.println("\n");
		
		for(int i = 0; i < 3; i++)
			rotorArr[i].reset();
		/*
		 * End Full System Output over every rotor step position
		 */
		
		/*
		 * Begin ABC Test
		 */
		iter = new StringCharacterIterator(msg);
		String out4 = "";
		System.out.println("Begin ABC Test");
		
		for(int i = 0; i < 26; i++) {
			for(int j = 0; j < 26; j++) {
				while(iter.current() != CharacterIterator.DONE) {
					if(rotorArr[0].rotate()) {
						if(rotorArr[1].rotate()) {
							rotorArr[2].rotate();
						}
					}
					//System.out.print(iter.current() + "\t>\t");
					System.out.print(
							pbr.encrypt(
									rotorArr[0].decrypt(
											rotorArr[1].decrypt(
													rotorArr[2].decrypt(
															rf.encrypt(
																	rotorArr[2].encrypt(
																			rotorArr[1].encrypt(
																					rotorArr[0].encrypt(
																							pbr.encrypt(
																									iter.current()))))))))) + "");
					iter.next();
				}
				iter.first();
			}
		}
		System.out.println();

		for(int i = 0; i < 3; i++)
			rotorArr[i].reset();

		iter = new StringCharacterIterator(out4);
		counter = 0;
		
		while(iter.current() != CharacterIterator.DONE) {
			if(rotorArr[0].rotate()) {
				if(rotorArr[1].rotate()) {
					rotorArr[2].rotate();
				}
			}
			//System.out.print(iter.current() + "\t>\t");
			System.out.print(
					pbr.encrypt(
							rotorArr[0].decrypt(
									rotorArr[1].decrypt(
											rotorArr[2].decrypt(
													rf.encrypt(
															rotorArr[2].encrypt(
																	rotorArr[1].encrypt(
																			rotorArr[0].encrypt(
																					pbr.encrypt(
																							iter.current()))))))))) + "");
			iter.next();
			if((++counter)%26 == 0) System.out.println();
		}
		/*
		 * End ABC Test
		 */
	}

	/*
	 * Input:
B
II - IV - V
B - U - L
B - L - A
A:V B:S C:G D:L F:U H:Z I:N K:M O:W R:X
EDPUD NRGYS ZRCXN UYTPO MRMBO FKTBZ REZKM LXLVE FGUEY SIOZV EQMIK UBPMM YLKLT TDEIS MDICA GYKUA CTCDO MOHWX MUUIA UBSTS LRNBZ SZWNR FXWFY SSXJZ VIJHI DISHP RKLKA YUPAD TXQSP INQMA TLPIF SVKDA SCTAC DPBOP VHJK-
	 * 
	 * Output:
	 * AUFKL XABTE ILUNG XVONX KURTI NOWAX KURTI NOWAX NORDW ESTLX SEBEZ XSEBE ZXUAF FLIEG ERSTR ASZER IQTUN GXDUB ROWKI XDUBR OWKIX OPOTS CHKAX OPOTS CHKAX UMXEI NSAQT DREIN ULLXU HRANG ETRET ENXAN GRIFF XINFX RGTX-
	 *
	 * Input:
B
II - IV - V
B - U - L
L - S - D
A:V B:S C:G D:L F:U H:Z I:N K:M O:W R:X
SFBWD NJUSE GQOBH KRTAR EEZMW KPPRB XOHDR OEQGB BGTQV PGVKB VVGBI MHUSZ YDAJQ IROAX SSSNR EHYGG RPISE ZBOVM QIEMM ZCYSG QDGRE RVBIL EKXYQ IRGIR QNRDN VRXCY YTNJR
	 * 
	 * Output:
	 * DREIG EHTLA NGSAM ABERS IQERV ORWAE RTSXE INSSI EBENN ULLSE QSXUH RXROE MXEIN SXINF RGTXD REIXA UFFLI EGERS TRASZ EMITA NFANG XEINS SEQSX KMXKM XOSTW XKAME NECXK
	 *
	 * Input:
Thin B
B - II - IV - I
A - A - A - V
V - J - N - A
A:T B:L D:F G:J H:M N:W O:P Q:Y R:Z V:X
NCZW VUSX PNYM INHZ XMQX SFWX WLKJ AHSH NMCO CCAK UQPM KCSM HKSE INJU SBLK IOSX CKUB HMLL XCSJ USRR DVKO HULX WCCB GVLI YXEO AHXR HKKF VDRE WEZL XOBA FGYU JQUK GRTV UKAM EURB VEKS UHHV OYHA BCJW MAKL FKLM YFVN RIZR VVRT KOFD ANJM OLBG FFLE OPRG TFLV RHOW OPBE KVWM UQFM PWPA RMFH AGKX IIBG
	 * 
	 * Output: 
	 * VONV ONJL OOKS JHFF TTTE INSE INSD REIZ WOYY QNNS NEUN INHA LTXX BEIA NGRI FFUN TERW ASSE RGED RUEC KTYW ABOS XLET ZTER GEGN ERST ANDN ULAC HTDR EINU LUHR MARQ UANT ONJO TANE UNAC HTSE YHSD REIY ZWOZ WONU LGRA DYAC HTSM YSTO SSEN ACHX EKNS VIER MBFA ELLT YNNN NNNO OOVI ERYS ICHT EINS NULL
	 * 
	 * Input:
B
III - VI - VIII
01 - 08- 13
U - Z - V
A:N E:Z H:K I:J L:R M:Q O:T P:V S:W U:X
YKAE NZAP MSCH ZBFO CUVM RMDP YCOF HADZ IZME FXTH FLOL PZLF GGBO TGOX GRET DWTJ IQHL MXVJ WKZU ASTR
	 * 
	 * Output:
	 * STEU EREJ TANA FJOR DJAN STAN DORT QUAA ACCC VIER NEUN NEUN ZWOF AHRT ZWON ULSM XXSC HARN HORS THCO
	 */
	@Override
	public void actionButtonActionPerformed(ActionEvent evt) {
		String input = getInputText().getText();
		String lines[] = input.split("\\r?\\n");
		String out = "";

		for(int i = 0; i < 6; i++)
			lines[i] = lines[i].toUpperCase();

		String reflector = lines[0];
		String rotors = lines[1];
		String tempName = lines[2];
		String key = lines[3];
		String plugOrder = lines[4];
		input = lines[5];
		String msg = input.replaceAll("\\W", "");

		Reflector rf = initReflector(reflector);
		Plugboard pb = new Plugboard(genPlugboard(plugOrder));
		Rotor[] rotorArr = initRotors(rotors, tempName, key);

		CharacterIterator iter = new StringCharacterIterator(msg);

		while(iter.current() != CharacterIterator.DONE) {
			if(rotorArr[0].rotate()) {
				if(rotorArr[1].rotate()) {
					rotorArr[2].rotate();
					rotorArr[1].rotate();
				}
			}
			out = out +
					pb.encrypt(
							rotorArr[0].decrypt(
									rotorArr[1].decrypt(
											rotorArr[2].decrypt(
													rf.encrypt(
															rotorArr[2].encrypt(
																	rotorArr[1].encrypt(
																			rotorArr[0].encrypt(
																					pb.encrypt(
																							iter.current())))))))));
			iter.next();
		}
		iter.first();

		for(int i = 0; i < 3; i++)
			rotorArr[i].reset();

		getMainCipherTextArea().setText("");

		out = standardize(out, input);

		getMainCipherTextArea().append(out);
	}

	private String standardize(String string, String input) {
		char[] in = input.toCharArray();
		String output;
		ArrayList<Character> outputArr = new ArrayList<Character>();
		for(char c: string.toCharArray())
			outputArr.add(c);

		for(int i = 0; i < input.length(); i++)
			if(!(in[i] >= 'A' && in[i] <= 'Z'))
				outputArr.add(i, in[i]);

		outputArr.add(input.length(), " ".toCharArray()[0]);

		StringBuilder sb = new StringBuilder();
		for(Character ch: outputArr)
			sb.append(ch);
		output = sb.toString();

		return output;
	}
	
	public Enigma() {
		super();
		initializeActionBtn("Enigma");
		setMainCipherPanelText("Enigma");
	}

	/*
	 * Takes a string
	 * Interprets the input 
	 * Outputs a reflector according to the input string
	 */
	private Reflector initReflector(String reflector) {
		switch(reflector) {
			case "B":
				return new ReflectorB();
			case "C":
				return new ReflectorC();
			case "BThin":
				return new ReflectorBThin();
			case "CThin":
				return new ReflectorCThin();
			default:
				return new ReflectorB(); //error case
		}
	}

	/*
	 * Takes the inputed plug ordering
	 * Outputs a string that Plugboard will accept as an argument
	 */
	private String genPlugboard(String order) {
		String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String[] pos = new String[26];
		String out = "";

		/*
		 * convert plugboard data to a single string
		 */
		String[] pairs = order.split(" ");
		String[][] pairArr = new String[pairs.length][2];
		for(int i = 0; i < pairs.length; i++) {
			pairArr[i] = pairs[i].split(":");
			pos[alpha.indexOf(pairArr[i][0])] = pairArr[i][1];
			pos[alpha.indexOf(pairArr[i][1])] = pairArr[i][0];
		}

		for(int i = 0; i < 26; i++) {
			if(pos[i] == null || pos[i] == "")
				pos[i] = ((Character)alpha.charAt(i)).toString();
			out = out + pos[i];
		}

		return out;
	}

	/*
	 * Takes the rotors used and their positions and what letter position they start at
	 * Initializes the correct rotors in the proper order at the proper starting letter
	 * Outputs the array of Rotors
	 */
	private Rotor[] initRotors(String order, String tempName, String key) {
		Rotor[] rotorArr = new Rotor[3];

		/*
		 * convert order and starting position data
		 */
		String[] rotors = order.split(" - ");
		String[] tempArr = tempName.split(" - ");
		String[] keyLetter = key.split(" - ");

		for(int i = 0; i < 3; i++) {
			switch(rotors[i]) {
				case "I":
					rotorArr[i] = new Rotor1(i, keyLetter[i].charAt(0));
					break;
				case "II":
					rotorArr[i] = new Rotor2(i, keyLetter[i].charAt(0));
					break;
				case "III":
					rotorArr[i] = new Rotor3(i, keyLetter[i].charAt(0));
					break;
				case "IV":
					rotorArr[i] = new Rotor4(i, keyLetter[i].charAt(0));
					break;
				case "V":
					rotorArr[i] = new Rotor5(i, keyLetter[i].charAt(0));
					break;
				/*
				case "VI":
					rotorArr[i] = new Rotor6(i, keyLetter[i].charAt(0));
				case "VII":
					rotorArr[i] = new Rotor7(i, keyLetter[i].charAt(0));
				case "VIII":
					rotorArr[i] = new Rotor8(i, keyLetter[i].charAt(0));
				*/
				default:
					//invalid input
			}
		}
		return rotorArr;
	}
}

/*
 * Plugboard takes a string of length 26
 * The string acts plug wiring for the plugboard of the physical Enigma machine
 * If a letter should route to itself, that letter should be placed in it's alphabetical index
 * (ie., The letter 'E' would be the 5th character of the string)
 * 
 * Before a letter enters the rotors and after the letter leaves the rotors,
 * the letter passes through the plugboard.
 * The letter gets transformed by becoming the letter in the pegs string that's
 * at the same position as the input letter in the alphabet.
 */
class Plugboard{
	private String pegs;
	private static String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

	Plugboard(String pegs) {
		this.pegs = pegs;
		try {
			if(pegs.length() > 26)
				throw new Exception();
		}catch(Exception e) {
			System.out.println("Pegs string is too long. Pegs trimmed letters from the end down to a length of 26.");
			this.pegs = this.pegs.substring(0, 25);
		}

		try {
			for(int i = 1; i < pegs.length(); i++)
				for(int j = 0; j < i; j++)
					if(pegs.charAt(i) == pegs.charAt(j))
						throw new Exception();
		}catch(Exception e) {
			System.out.println("Repeat letters in the pegs string. Pegs defaulted to alphabetical order.");
			this.pegs = Plugboard.alpha;
		}
	}

	Plugboard(){
		this.pegs = Plugboard.alpha;
	}

	/*
	 * Take the index of the input letter in the alphabet
	 * Find the character at that index in the pegs String
	 * Output that letter
	 */
	public char encrypt(char in) {
		return this.pegs.charAt(Plugboard.alpha.indexOf(in));
	}
}

/*
 * Abstract class for the rotors
 * Each rotor keeps track of:
 * 	it position in the rotor order
 * 	how many times it's stepped away from its starting position
 * 	its letter order
 * 	and
 * 	the letter position that makes the next rotor step
 */
abstract class Rotor{
	protected static String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	private int pos, step;

	/*
	 * Initializes Rotor with a position of 0 and starting character of A
	 */
	public Rotor(){
		this.pos = 0;
		this.step = alpha.indexOf('A');
	}

	/*
	 * Initializes Rotor with a given position and a starting character of A
	 */
	public Rotor(int pos){
		this.pos = pos;
		this.step = alpha.indexOf('A');
	}

	/*
	 * Initializes Rotor with a given position and starting character
	 */
	public Rotor(int pos, char start) {
		this.pos = pos;
		this.step = alpha.indexOf(start);
	}

	/*
	 * Returns position
	 */
	public int getPos(){
		return this.pos;
	}

	/*
	 * Sets position
	 */
	public void pos(int pos) {
		this.pos = pos;
	}

	/*
	 * Returns step
	 */
	public int getStep() {
		return this.step;
	}

	/*
	 * Resets step count to 0
	 */
	public void reset() {
		this.step = 0;
	}
	
	protected abstract boolean M4Only();

	/*
	 * Allows the Rotor classes to call encrypt() and pass their letter order
	 */
	protected abstract char encrypt(char in);

	/*
	 * Takes the input character and the character ordering for the rotor used
	 * Finds that character's alphabet index
	 * Shifts the index based on steps
	 * Finds the character at that position in the rotor's character order
	 * Finds that character's index in the alphabet
	 * Shifts the index the opposite direction based on steps
	 * Converts back to the alphabet character
	 * Outputs that character
	 */
	protected char encrypt(char in, String left) {
		int index = (alpha.indexOf(left.charAt((alpha.indexOf(in)+step)%26))-step)%26;
		return alpha.charAt((index + 26)%26);
	}

	/*
	 * Allows the Rotor classes to call decrypt() and pass their letter order
	 */
	protected abstract char decrypt(char in);

	/*
	 * Takes the input character and the character ordering for the rotor used
	 * Finds that character's alphabet index
	 * Shifts the index based on steps
	 * Finds the character at that location
	 * Finds the index of that character in the character order
	 * Finds the character at that index in the alphabet
	 * Finds that character's index
	 * Shifts the index the opposite direction based on steps
	 * Converts back to the alphabet character
	 * Outputs that character
	 */
	protected char decrypt(char in, String left) {
		int index = (alpha.indexOf(alpha.charAt(left.indexOf(alpha.charAt((alpha.indexOf(in)+step)%26))))-step)%26;
		return alpha.charAt((index + 26)%26);
	}

	/*
	 * Takes two characters
	 * Increments step
	 * Returns true if it has stepped to the stepping character
	 */
	protected boolean rotate(int stepChar1, int stepChar2) {
		int x = (++step)%26;
		if(x == stepChar1 || x == stepChar1)
			return true;
		return false;
	}
	
	protected boolean rotate(int stepChar) {
		return rotate(stepChar, stepChar);
	}
	
	protected abstract boolean rotate();
	
	protected abstract int getStepChar();
}

class Rotor1 extends Rotor{
	private String left = "EKMFLGDQVZNTOWYHXUSPAIBRCJ";
	private boolean M4Only = false;
	private int stepChar = Rotor.alpha.indexOf('R');

	Rotor1(){
		super();
	}

	Rotor1(int pos){
		super(pos);
	}
	
	Rotor1(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}

	@Override
	public int getStepChar() {
		return stepChar;
	}
}

class Rotor2 extends Rotor{
	private String left = "AJDKSIRUXBLHWTMCQGZNPYFVOE";
	private boolean M4Only = false;
	private int stepChar = Rotor.alpha.indexOf('F');

	Rotor2(){
		super();
	}

	Rotor2(int pos){
		super(pos);
	}
	
	Rotor2(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}

	@Override
	public int getStepChar() {
		return stepChar;
	}
}

class Rotor3 extends Rotor{
	private String left = "BDFHJLCPRTXVZNYEIWGAKMUSQO";
	private boolean M4Only = false;
	private int stepChar = Rotor.alpha.indexOf('W');

	Rotor3(){
		super();
	}

	Rotor3(int pos){
		super(pos);
	}
	
	Rotor3(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}

	@Override
	public int getStepChar() {
		return stepChar;
	}
}

class Rotor4 extends Rotor{
	private String left = "ESOVPZJAYQUIRHXLNFTGKDCMWB";
	private boolean M4Only = false;
	private int stepChar = Rotor.alpha.indexOf('K');

	Rotor4(){
		super();
	}

	Rotor4(int pos){
		super(pos);
	}
	
	Rotor4(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}

	@Override
	public int getStepChar() {
		return stepChar;
	}
}

class Rotor5 extends Rotor{
	private String left = "VZBRGITYUPSDNHLXAWMJQOFECK";
	private boolean M4Only = false;
	private int stepChar = Rotor.alpha.indexOf('A');

	Rotor5(){
		super();
	}

	Rotor5(int pos){
		super(pos);
	}
	
	Rotor5(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}

	@Override
	public int getStepChar() {
		return stepChar;
	}
}

/*
class Rotor6 extends Rotor{
	private String left = "VZBRGITYUPSDNHLXAWMJQOFECK";
	private boolean M4Only = false;

	Rotor6(){
		super();
	}

	Rotor6(int pos){
		super(pos);
	}
	
	Rotor6(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}
}

class Rotor7 extends Rotor{
	private String left = "VZBRGITYUPSDNHLXAWMJQOFECK";
	private boolean M4Only = false;

	Rotor7(){
		super();
	}

	Rotor7(int pos){
		super(pos);
	}
	
	Rotor7(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}
}

class Rotor8 extends Rotor{
	private String left = "VZBRGITYUPSDNHLXAWMJQOFECK";
	private boolean M4Only = false;

	Rotor8(){
		super();
	}

	Rotor8(int pos){
		super(pos);
	}
	
	Rotor8(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}
}

class RotorBeta extends Rotor{
	private String left = "LEYJVCNIXWPBQMDRTAKZGFUHOS";
	private boolean M4Only = true;

	RotorBeta(){
		super();
	}

	RotorBeta(int pos){
		super(pos);
	}
	
	RotorBeta(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}
}

class RotorGamma extends Rotor{
	private String left = "FSOKANUERHMBTIYCWLQPZXVGJD";
	private boolean M4Only = true;

	RotorGamma(){
		super();
	}

	RotorGamma(int pos){
		super(pos);
	}
	
	RotorGamma(int pos, char start){
		super(pos, start);
	}

	public char encrypt(char in) {
		return super.encrypt(in, this.left);
	}

	public char decrypt(char in) {
		return super.decrypt(in, this.left);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
	
	public boolean rotate() {
		return super.rotate(stepChar);
	}
}

/*
 * Abstract class for the Reflectors
 * 
 */
abstract class Reflector{
	private static String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

	Reflector(){};

	/*
	 * Takes the input character and the Reflector's character order
	 * Finds the character's index in the alphabet
	 * Finds the character at that position in the Reflector's character order
	 * Outputs that character
	 */
	public char encrypt(char in, String out) {
		//System.out.print(out.charAt(Reflector.alpha.indexOf(in)) + "\t>\t");
		return out.charAt(Reflector.alpha.indexOf(in));
	}

	/*
	 * Allows the Reflector classes to call encrypt() and pass their character order
	 */
	protected abstract char encrypt(char in);
	
	protected abstract boolean M4Only();
}

class ReflectorB extends Reflector{
	private String out = "YRUHQSLDPXNGOKMIEBFZCWVJAT";
	private boolean M4Only = false;

	ReflectorB(){
		super();
	}

	public char encrypt(char in) {
		return super.encrypt(in, out);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
}

class ReflectorC extends Reflector{
	private String out = "FVPJIAOYEDRZXWGCTKUQSBNMHL";
	private boolean M4Only = false;

	ReflectorC(){
		super();
	}

	public char encrypt(char in) {
		return super.encrypt(in, out);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
}

class ReflectorBThin extends Reflector{
	private String out = "ENKQAUYWJICOPBLMDXZVFTHRGS";
	private boolean M4Only = true;

	ReflectorBThin(){
		super();
	}

	public char encrypt(char in) {
		return super.encrypt(in, out);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
}

class ReflectorCThin extends Reflector{
	private String out = "RDOBJNTKVEHMLFCWZAXGYIPSUQ";
	private boolean M4Only = true;

	ReflectorCThin(){
		super();
	}

	public char encrypt(char in) {
		return super.encrypt(in, out);
	}
	
	public boolean M4Only() {
		return M4Only;
	}
}
