package MainToBeRenamed;/*
 * MainToBeRenamed.CryptoHelper.java
 *
 * Created on January 11, 2005, 7:37 PM
 */

import Ciphers.*;
import ServiceImpl.CipherServiceImpl;
import Services.CipherService;
import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import Menu.OptionsMenu;

/**
 *
 * @author  Harlock
 */
public class CryptoHelper extends javax.swing.JFrame {
    
    /** Creates new form MainToBeRenamed.CryptoHelper */
    public CryptoHelper() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {



        termsOfTheGPL = new TermsOfTheGPL();
        frequencyCount = new FrequencyCount();
        runTheAlphabet = new RunTheAlphabet();
        biGraphs = new BiGraphs();
        triGraphs = new TriGraphs();
        nGraphs = new NGraphs();
        affineKnownPlaintextAttack = new AffineKnownPlaintextAttack();
        affineEncipher = new AffineEncipherDecipher();
        affineDecipher = new AffineEncipherDecipher();
        splitOffAlphabets = new SplitOffAlphabets();
        polyMonoCalculator = new PolyMonoCalculator();
        viginereEncipher = new ViginereEncipher();
        viginereDecipher = new ViginereDecipher();
        viginereBruteForce = new ViginereBruteForce();
        autoKeyCyphertextAttack = new AutoKeyCyphertextAttack();
        autoKeyPlaintextAttack = new AutoKeyPlaintextAttack();
        autoKeyDecipher = new AutoKeyDecipher();
        hillBruteForce = new HillBruteForce();
        columnTranspositionWorksheet = new ColumnTranspositionWorksheet();
        gcdAndInverse = new GCDAndInverse();
        substitutionSolver = new SubstitutionSolver();
        base64Encode = new Base64Encode();
//        base64Decode = new Base64Decode();
        playfairEncipher = new PlayfairEncipher();

        optionsMenu = new OptionsMenu();

        pigLatinEncipher = new encryptPL();
        pigLatinDecipher = new decryptPL();

        encryptkw = new encryptKW();
        decryptkw = new decryptKW();
        
        caesarcipher = new caesarCipher();
        columnEncrypt = new columnEncrypt();
        columnDecrypt = new columnDecrypt();
        jscrollPane34 = new JScrollPane();
        jscrollPane35 = new JScrollPane();
        

        jScrollPane29 = new JScrollPane();
        jScrollPane30 = new JScrollPane();
        buttonGroup1 = new ButtonGroup();
        buttonGroup2 = new ButtonGroup();
        jSplitPane1 = new JSplitPane();
        jScrollPane1 = new JScrollPane();
        inputText = new JTextArea();
        rightHandNavPanelTab = new JTabbedPane();
        jPanel17 = new JPanel();
        jScrollPane10 = new JScrollPane();
        jScrollPane29 = new JScrollPane();
        jScrollPane30 = new JScrollPane();
        jScrollPane31 = new JScrollPane();
        jScrollPane32 = new JScrollPane();
        jScrollPane33 = new JScrollPane();


        Object[] ciphersList = {frequencyCount, runTheAlphabet, biGraphs, triGraphs, nGraphs, affineKnownPlaintextAttack, affineEncipher, affineDecipher, splitOffAlphabets, polyMonoCalculator,viginereEncipher,
        viginereDecipher, viginereBruteForce, autoKeyPlaintextAttack, autoKeyDecipher, hillBruteForce, columnTranspositionWorksheet, gcdAndInverse, substitutionSolver, termsOfTheGPL, base64Encode};

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("CryptoHelper \u00a9Gary Watson 2005 (Under the terms of the GPL)");
        jSplitPane1.setDividerLocation(80);
        jSplitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT);
        inputText.setFont(new Font("Monospaced", 0, 12));
        inputText.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        inputText.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(inputText);
/*
        jbuttonOpenFile.setText("Open File!");
        jbuttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButttonOpenFileActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        jScrollPane1.setColumnHeaderView(jbuttonOpenFile);
*/

        jSplitPane1.setTopComponent(jScrollPane1);

        rightHandNavPanelTab.setTabPlacement(JTabbedPane.RIGHT);
//begin frequency count

        //need to figure out how to extract ALL event listeners into a class

        //workaround to pass inputText to FrequencyCount class
        frequencyCount.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                frequencyCount.setInputText(inputText);
            }
        });



//end of frequency count

        //workaround to pass inputText to FrequencyCount class
        runTheAlphabet.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                runTheAlphabet.setInputText(inputText);
            }
        });


//end run the alphabet

      //begin of encryptkw
        encryptkw.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt){
        		jTextAreaKeyReleased(evt);
        	}
        });
        encryptkw.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        encryptkw.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		encryptkw.setInputText(inputText);
        	}
        });
        
        jScrollPane29.setViewportView(encryptkw.getMainCipherTextArea());
        encryptkw.getMainCipherPanel().add(jScrollPane29, BorderLayout.CENTER);

      //end of encryptkw
      //begin decryptkw
        decryptkw.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt){
        		jTextAreaKeyReleased(evt);
        	}
        });
        decryptkw.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        decryptkw.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		decryptkw.setInputText(inputText);
        	}
        });
        jScrollPane30.setViewportView(decryptkw.getMainCipherTextArea());
        decryptkw.getMainCipherPanel().add(jScrollPane30, BorderLayout.CENTER);

//end of decrypt kw
//begin encrypt pig latin
        pigLatinEncipher.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt) {
        		jTextAreaKeyReleased(evt);
        	}
        });
        pigLatinEncipher.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        pigLatinEncipher.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		pigLatinEncipher.setInputText(inputText);
        	}
        });

        jScrollPane31.setViewportView(pigLatinEncipher.getMainCipherTextArea());
        pigLatinEncipher.getMainCipherPanel().add(jScrollPane31, BorderLayout.CENTER);

//end encrypt pig latin
//begin decrypt pig latin
        pigLatinDecipher.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt) {
        		jTextAreaKeyReleased(evt);
        	}
        });
        pigLatinDecipher.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
                  	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        pigLatinDecipher.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		pigLatinDecipher.setInputText(inputText);
        	}
        });

        jScrollPane32.setViewportView(pigLatinDecipher.getMainCipherTextArea());
        pigLatinDecipher.getMainCipherPanel().add(jScrollPane32, BorderLayout.CENTER);

//end decrypt pig latin
        
//begin caesarcipher
        caesarcipher.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt){
        		jTextAreaKeyReleased(evt);
        	}
        });
        caesarcipher.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        caesarcipher.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		caesarcipher.setInputText(inputText);
        	}
        });
        
        jScrollPane33.setViewportView(caesarcipher.getMainCipherTextArea());
        caesarcipher.getMainCipherPanel().add(jScrollPane33, BorderLayout.CENTER);

//end of caesarCipher
//begin columnEncrypt
        columnEncrypt.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt){
        		jTextAreaKeyReleased(evt);
        	}
        });
        columnEncrypt.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        columnEncrypt.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		columnEncrypt.setInputText(inputText);
        	}
        });
        
        jscrollPane34.setViewportView(columnEncrypt.getMainCipherTextArea());
        columnEncrypt.getMainCipherPanel().add(jscrollPane34, BorderLayout.CENTER);

 //end columnEncrypt
 //begin columnDecrypt
        columnDecrypt.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt){
        		jTextAreaKeyReleased(evt);
        	}
        });
        columnDecrypt.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        columnDecrypt.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		columnDecrypt.setInputText(inputText);
        	}
        });
        
        jscrollPane35.setViewportView(columnDecrypt.getMainCipherTextArea());
        columnDecrypt.getMainCipherPanel().add(jscrollPane35, BorderLayout.CENTER);

 //end columnDecrypt
        
//begin BiGraphs

        //workaround to pass inputText to FrequencyCount class
        biGraphs.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                biGraphs.setInputText(inputText);
            }
        });


//end BiGraphs
// begin TriGraphs

        //workaround to pass inputText to FrequencyCount class
        triGraphs.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                triGraphs.setInputText(inputText);
            }
        });


//end of TriGraphs
//begin NGraphs

        //workaround to pass inputText to FrequencyCount class
        nGraphs.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                nGraphs.setInputText(inputText);
            }
        });


//end of NGraphs
//begin affineKnown

        affineKnownPlaintextAttack.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                affineKnownPlaintextAttack.setInputText(inputText);
            }
        });


//end of affineKnown
//begin affineEncipher

        affineEncipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                affineEncipher.setInputText(inputText);
            }
        });


//end AffineEncipher
//begin AffineDecipher

        affineDecipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                affineDecipher.setInputText(inputText);
            }
        });



        //end affineDecipher
        //begin Split Off Alphabets

        splitOffAlphabets.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                splitOffAlphabets.setInputText(inputText);
            }
        });


//end split the alphabet
//begin PolyMonoCalculatro

        polyMonoCalculator.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                polyMonoCalculator.setInputText(inputText);
            }
        });


//end Poly/Mono Calculator
//begin Viginere Encipher
        viginereEncipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                viginereEncipher.setInputText(inputText);
            }
        });


//end Vinigner Enciphe
//begin decipher
        viginereDecipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                viginereDecipher.setInputText(inputText);
            }
        });


//end Viginere Decipher
//begin Viginere Brute Force
        viginereBruteForce.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                viginereBruteForce.setInputText(inputText);
            }
        });


//end Viginere Brute Force
//begin AutoKey Cypyhertext Attack
        autoKeyCyphertextAttack.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                autoKeyCyphertextAttack.setInputText(inputText);
            }
        });


//end autokey cypehertext attack
//begin plaintext attack
        autoKeyPlaintextAttack.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                autoKeyPlaintextAttack.setInputText(inputText);
            }
        });


//end AutoKey Plaintext Attack
//begin autokey decipher

        autoKeyDecipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                autoKeyDecipher.setInputText(inputText);
            }
        });


//end autoKey decipher
//begin hill brute force

        hillBruteForce.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                hillBruteForce.setInputText(inputText);
            }
        });



//end hill brute force
//begin column transpotions

        columnTranspositionWorksheet.getGoButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                columnTranspositionWorksheet.setInputText(inputText);
            }
        });


//end transposiotion
//begin GCD
        gcdAndInverse.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                gcdAndInverse.setInputText(inputText);
            }
        });

//end GCD

//begin Jacob's Cipher thing.

        base64Encode.getActionButton().addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                base64Encode.setInputText(inputText);
            }
        });



//end Jacob's Cipher thing.

//begin base64 decode
/*
        base64Decode.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        base64Decode.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        substitutionSolver.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                substitutionSolver.setInputText(inputText);
            }
        });
*/
//begin playfair Encipher
        playfairEncipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            	playfairEncipher.setInputText(inputText);
            }
        });
//end playfair Encipher
        
//end substitution solver
        addActionButtonActionListener(ciphersList);
        addMouseListeners(ciphersList);
        addKeyListeners(ciphersList);

        addRightHandNavPanelTabs();

        jPanel17.setLayout(new BorderLayout());

        jPanel17.addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                jPanel17ComponentShown(evt);
            }
        });


        jScrollPane10.setViewportView(termsOfTheGPL.getTermsOfTheGPLTextArea());

        jPanel17.add(jScrollPane10, BorderLayout.CENTER);



        jSplitPane1.setBottomComponent(rightHandNavPanelTab);

        getContentPane().add(jSplitPane1, BorderLayout.CENTER);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1000)/2, (screenSize.height-800)/2, 1000, 800);
    }
    // </editor-fold>//GEN-END:initComponents

    public void addActionButtonActionListener(Object[] ciphersList){
//        try{
//            for(int i = 0; i < ciphersList.length; i++){
//                Method m = ciphersList[i].getClass().getMethod("getActionButton", null);
//
//                JButton actionButton = (JButton) m.invoke(ciphersList[i]);
//                Object object = ciphersList[i];
//                actionButton.addActionListener( new ActionListener(){
//                    @Override
//                    public void actionPerformed(ActionEvent e) {
//
//
//                        base64Decode.setInputText(inputText);
//                        try {
//                           // Method[] m = object.getClass().getMethods();
//                           // Method ms = object.getClass().getMethod("getInputText");
//                            //JTextArea inputText = (JTextArea) ms.invoke(object);
//
//                           // ms.invoke(object, inputText);
//                        } catch (NoSuchMethodException ex) {
//                            ex.printStackTrace();
//                        } catch (IllegalAccessException ex) {
//                            ex.printStackTrace();
//                        } catch (InvocationTargetException ex) {
//                            ex.printStackTrace();
//                        }
//                    }
//                });
//            }
//        }
//        catch(Exception e){
//            //todo error handling.
//        }
    }


    public void addMouseListeners(Object[] ciphersList){

        try{
            for(int i = 0; i < ciphersList.length; i++){
                Method m = ciphersList[i].getClass().getMethod("getMainCipherTextArea", null);

                JTextArea mainCipherTextArea = (JTextArea) m.invoke(ciphersList[i]);
                mainCipherTextArea.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent evt) {
                        jTextAreaMouseClicked(evt);
                    }
                });
            }
        }
        catch(Exception e){
            //todo error handling
        }
    }

    public void addKeyListeners(Object[] ciphersList){

        try{
            for(int i = 0; i < ciphersList.length; i++){
                Method m = ciphersList[i].getClass().getMethod("getMainCipherTextArea", null);

                JTextArea mainCipherTextArea = (JTextArea) m.invoke(ciphersList[i]);
                mainCipherTextArea.addKeyListener(new KeyAdapter() {
                    public void keyReleased(KeyEvent evt) {
                        jTextAreaKeyReleased(evt);
                    }
                });
            }
        }
        catch(Exception e){
            //todo error handling
        }
    }



    public void addRightHandNavPanelTabs(){
        rightHandNavPanelTab.addTab("Frequency Count", frequencyCount.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Run The Alphabet", runTheAlphabet.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Encrypt Keyword", encryptkw.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Decrypt Keyword", decryptkw.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Encrypt Pig Latin", pigLatinEncipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Decrypt Pig Latin", pigLatinDecipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Caesar Cipher", caesarcipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("CTC Encrypt", columnEncrypt.getMainCipherPanel());
        rightHandNavPanelTab.addTab("CTC Decrypt", columnDecrypt.getMainCipherPanel());
        rightHandNavPanelTab.addTab("BiGraphs", biGraphs.getMainCipherPanel());
        rightHandNavPanelTab.addTab("TriGraphs", triGraphs.getMainCipherPanel());
        rightHandNavPanelTab.addTab("NGraphs", nGraphs.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Affine Known Plaintext Attack", affineKnownPlaintextAttack.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Affine Encipher", affineEncipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Affine Decipher", affineDecipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Split Off Alphabets", splitOffAlphabets.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Poly/Mono Calculator", polyMonoCalculator.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Viginere Encipher", viginereEncipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Viginere Decipher", viginereDecipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Viginere Brute Force", viginereBruteForce.getMainCipherPanel());
        rightHandNavPanelTab.addTab("AutoKey Cyphertext Attack", autoKeyCyphertextAttack.getMainCipherPanel());
        rightHandNavPanelTab.addTab("AutoKey Plaintext Attack", autoKeyPlaintextAttack.getMainCipherPanel());
        rightHandNavPanelTab.addTab("AutoKey Decipher", autoKeyDecipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Hill Brute Force", hillBruteForce.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Column Transposition Worksheet", columnTranspositionWorksheet.getMainPanel());
        rightHandNavPanelTab.addTab("GCD and Inverse", gcdAndInverse.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Base64Encode", base64Encode.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Substitution Solver", substitutionSolver.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Playfair Encipher", playfairEncipher.getMainCipherPanel());
        rightHandNavPanelTab.addTab("Terms of the GPL", jPanel17);
    }

    private void jButttonOpenFileActionPerformed(java.awt.event.ActionEvent evt) throws IOException {


        final JFileChooser fc = new JFileChooser();

//In response to a button click:
        int returnVal = fc.showOpenDialog(null);

        String inputFile = fc.getSelectedFile().getPath();

        String intmandun = " ";

        try {
            intmandun = new String(Files.readAllBytes(Paths.get(inputFile)));
        } catch (IOException e) {
            e.printStackTrace();
        }

//        String lines = Files.readAllLines(Paths.get(inputFile));
//        String intman = lines;
        String inputString = intmandun;
        inputText.setText(inputString);
    }


    private void jPanel17ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel17ComponentShown
        jScrollPane10.getVerticalScrollBar().setValue(0);
    }//GEN-LAST:event_jPanel17ComponentShown

    private void jTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaKeyReleased
        if (evt.isControlDown())
        {
            if (evt.getKeyCode()== KeyEvent.VK_F)
            {
                performSearch((JTextArea)evt.getSource());
            }
            else if (evt.getKeyCode()== KeyEvent.VK_G)
            {
                performSearchAgain((JTextArea)evt.getSource());
            }
        }
    }//GEN-LAST:event_jTextAreaKeyReleased
    private void performSearch(JTextArea j)
    {
            Caret c = j.getCaret();
            String str = j.getText();
            str = str.toUpperCase();
            searchStr = JOptionPane.showInputDialog("Please input a string to search for.", searchStr);
            searchStr = searchStr.toUpperCase();
            int x = str.indexOf(searchStr, c.getDot());
            c.setDot(x);
            if(x>=0)
            {
                c.moveDot(c.getDot() + searchStr.length());
                c.setSelectionVisible(true);
            }            
    }
    private void performSearchAgain(JTextArea j)
    {
            Caret c = j.getCaret();
            String str = j.getText();
            str = str.toUpperCase();
            int x = str.indexOf(searchStr, c.getDot());
            c.setDot(x);
            if(x>=0)
            {
                c.moveDot(c.getDot() + searchStr.length());
                c.setSelectionVisible(true);
            }            
    }
    private void jTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMouseClicked
        if (evt.getButton()== MouseEvent.BUTTON3)
        {
            optionsMenu.getOptionsMenu().show((JTextArea)evt.getSource(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextAreaMouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        performSearchAgain((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker());
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        performSearch((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker());
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker()).paste();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker()).copy();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptoHelper().setVisible(true);
            }
        });
    }


    private String searchStr;
    private int[][][][] dictionary;
    // Variables declaration - do not modify//GEN-BEGIN:variables

    private CipherService cipherService = new CipherServiceImpl();

    private TermsOfTheGPL termsOfTheGPL;
    private FrequencyCount frequencyCount;
    private RunTheAlphabet runTheAlphabet;
    private BiGraphs biGraphs;
    private TriGraphs triGraphs;
    private NGraphs nGraphs;
    private AffineKnownPlaintextAttack affineKnownPlaintextAttack;
    private AffineEncipherDecipher affineEncipher;
    private AffineEncipherDecipher affineDecipher;
    private SplitOffAlphabets splitOffAlphabets;
    private PolyMonoCalculator polyMonoCalculator;
    private ViginereEncipher viginereEncipher;
    private ViginereDecipher viginereDecipher;
    private ViginereBruteForce viginereBruteForce;
    private AutoKeyCyphertextAttack autoKeyCyphertextAttack;
    private AutoKeyPlaintextAttack autoKeyPlaintextAttack;
    private AutoKeyDecipher autoKeyDecipher;
    private HillBruteForce hillBruteForce;
    private ColumnTranspositionWorksheet columnTranspositionWorksheet;
    private GCDAndInverse gcdAndInverse;
    private SubstitutionSolver substitutionSolver;
    private Base64Encode base64Encode;
    //private Base64Decode base64Decode;
    private PlayfairEncipher playfairEncipher;


    private OptionsMenu optionsMenu;

    private encryptPL pigLatinEncipher;
    private decryptPL pigLatinDecipher;

    private encryptKW encryptkw;
    private decryptKW decryptkw;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;

    private caesarCipher caesarcipher;
    private javax.swing.JScrollPane jScrollPane33;
    
    private columnEncrypt columnEncrypt;
    private columnDecrypt columnDecrypt;
    private javax.swing.JScrollPane jscrollPane34;
    private javax.swing.JScrollPane jscrollPane35;
    
    
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;

    private javax.swing.JButton jbuttonOpenFile;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane rightHandNavPanelTab;
    private javax.swing.JTextArea inputText;
    // End of variables declaration//GEN-END:variables

}
