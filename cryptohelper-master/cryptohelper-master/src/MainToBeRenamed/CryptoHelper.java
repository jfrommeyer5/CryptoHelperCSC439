package MainToBeRenamed;/*
 * MainToBeRenamed.CryptoHelper.java
 *
 * Created on January 11, 2005, 7:37 PM
 */

import Ciphers.*;
import ServiceImpl.CipherServiceImpl;
import Services.CipherService;
import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.jar.*;
import java.util.zip.*;

/**
 *
 * @author  Harlock
 */
public class CryptoHelper extends javax.swing.JFrame {
    
    /** Creates new form MainToBeRenamed.CryptoHelper */
    public CryptoHelper() {
        initComponents();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        termsOfTheGPL = new TermsOfTheGPL();
        frequencyCount = new FrequencyCount();
        runTheAlphabet = new RunTheAlphabet();
        biGraphs = new BiGraphs();
        triGraphs = new TriGraphs();
        nGraphs = new NGraphs();
        affineKnownPlaintextAttack = new AffineKnownPlaintextAttack();
        affineEncipher = new AffineEncipherDecipher();
        affineDecipher = new AffineEncipherDecipher();
        splitOffAlphabets = new SplitOffAlphabets();
        polyMonoCalculator = new PolyMonoCalculator();
        viginereEncipher = new ViginereEncipher();
        viginereDecipher = new ViginereDecipher();
        viginereBruteForce = new ViginereBruteForce();
        autoKeyCyphertextAttack = new AutoKeyCyphertextAttack();
        autoKeyPlaintextAttack = new AutoKeyPlaintextAttack();
        autoKeyDecipher = new AutoKeyDecipher();
        hillBruteForce = new HillBruteForce();
        columnTranspositionWorksheet = new ColumnTranspositionWorksheet();
        gcdAndInverse = new GCDAndInverse();

        pigLatinEncipher = new encryptPL();
        pigLatinDecipher = new decryptPL();

        encryptkw = new encryptKW();
        decryptkw = new decryptKW();

        jScrollPane29 = new JScrollPane();
        jScrollPane30 = new JScrollPane();
        buttonGroup1 = new ButtonGroup();
        buttonGroup2 = new ButtonGroup();
        jPopupMenu1 = new JPopupMenu();
        jMenuItem1 = new JMenuItem();
        jMenuItem2 = new JMenuItem();
        jMenuItem3 = new JMenuItem();
        jMenuItem4 = new JMenuItem();
        jSplitPane1 = new JSplitPane();
        jScrollPane1 = new JScrollPane();
        inputText = new JTextArea();
        rightHandNavPanelTab = new JTabbedPane();
        jTextArea20 = new JTextArea();
        jPanel47 = new JPanel();
        jToolBar1 = new JToolBar();
        jLabel21 = new JLabel();
        jTextField11 = new JTextField();
        jButton21 = new JButton();
        jButton22 = new JButton();
        jButton20 = new JButton();
        jScrollPane28 = new JScrollPane();
        jTextArea21 = new JTextArea();
        jPanel17 = new JPanel();
        jScrollPane10 = new JScrollPane();
        jScrollPane29 = new JScrollPane();
        jScrollPane30 = new JScrollPane();
        jScrollPane31 = new JScrollPane();
        jScrollPane32 = new JScrollPane();

      

        //right click and you get a menu --- neat
        jMenuItem1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK));
        jMenuItem1.setText("Copy");
        jMenuItem1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK));
        jMenuItem2.setText("Paste");
        jMenuItem2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, InputEvent.CTRL_MASK));
        jMenuItem3.setText("Find from Cursor's Position");
        jMenuItem3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, InputEvent.CTRL_MASK));
        jMenuItem4.setText("Find Again");
        jMenuItem4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem4);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("MainToBeRenamed.CryptoHelper \u00a9Gary Watson 2005 (Under the terms of the GPL)");
        jSplitPane1.setDividerLocation(80);
        jSplitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT);
        inputText.setFont(new Font("Monospaced", 0, 12));
        inputText.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        inputText.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(inputText);
/*
        jbuttonOpenFile.setText("Open File!");
        jbuttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButttonOpenFileActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        jScrollPane1.setColumnHeaderView(jbuttonOpenFile);
*/

        jSplitPane1.setTopComponent(jScrollPane1);

        rightHandNavPanelTab.setTabPlacement(JTabbedPane.RIGHT);
//begin frequency count

        //need to figure out how to extract ALL event listeners into a class
        frequencyCount.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        frequencyCount.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        //workaround to pass inputText to FrequencyCount class
        frequencyCount.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                frequencyCount.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Frequency Count", frequencyCount.getMainCipherPanel());


//end of frequency count


        //need to figure out how to extract ALL event listeners into a class
        runTheAlphabet.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        runTheAlphabet.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        //workaround to pass inputText to FrequencyCount class
        runTheAlphabet.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                runTheAlphabet.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Run The Alphabet", runTheAlphabet.getMainCipherPanel());

//end run the alphabet

      //begin of encryptkw
        encryptkw.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt){
        		jTextAreaKeyReleased(evt);
        	}
        });
        encryptkw.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        encryptkw.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		encryptkw.setInputText(inputText);
        	}
        });
        
        jScrollPane29.setViewportView(encryptkw.getMainCipherTextArea());
        encryptkw.getMainCipherPanel().add(jScrollPane29, BorderLayout.CENTER);
        rightHandNavPanelTab.addTab("Encrypt Keyword", encryptkw.getMainCipherPanel());
      //end of encryptkw
      //begin decryptkw
        decryptkw.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt){
        		jTextAreaKeyReleased(evt);
        	}
        });
        decryptkw.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        decryptkw.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		decryptkw.setInputText(inputText);
        	}
        });
        jScrollPane30.setViewportView(decryptkw.getMainCipherTextArea());
        decryptkw.getMainCipherPanel().add(jScrollPane30, BorderLayout.CENTER);
        rightHandNavPanelTab.addTab("Decrypt Keyword", decryptkw.getMainCipherPanel());
//end of decrypt kw
//begin encrypt pig latin
        pigLatinEncipher.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt) {
        		jTextAreaKeyReleased(evt);
        	}
        });
        pigLatinEncipher.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        pigLatinEncipher.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		pigLatinEncipher.setInputText(inputText);
        	}
        });

        jScrollPane31.setViewportView(pigLatinEncipher.getMainCipherTextArea());
        pigLatinEncipher.getMainCipherPanel().add(jScrollPane31, BorderLayout.CENTER);
        rightHandNavPanelTab.addTab("Encrypt Pig Latin", pigLatinEncipher.getMainCipherPanel());
//end encrypt pig latin
//begin decrypt pig latin
        pigLatinDecipher.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
        	public void keyReleased(KeyEvent evt) {
        		jTextAreaKeyReleased(evt);
        	}
        });
        pigLatinDecipher.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
                  	public void mouseClicked(MouseEvent evt){
        		jTextAreaMouseClicked(evt);
        	}
        });
        pigLatinDecipher.getActionButton().addActionListener(new ActionListener() {
        	@Override
        	public void actionPerformed(ActionEvent e){
        		pigLatinDecipher.setInputText(inputText);
        	}
        });

        jScrollPane32.setViewportView(pigLatinDecipher.getMainCipherTextArea());
        pigLatinDecipher.getMainCipherPanel().add(jScrollPane32, BorderLayout.CENTER);
        rightHandNavPanelTab.addTab("Decrypt Pig Latin", pigLatinDecipher.getMainCipherPanel());
//end decrypt pig latin
//begin BiGraphs
        //need to extract all listeners
        biGraphs.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        biGraphs.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        //workaround to pass inputText to FrequencyCount class
        biGraphs.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                biGraphs.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("BiGraphs", biGraphs.getMainCipherPanel());
//end BiGraphs
// begin TriGraphs

        triGraphs.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        triGraphs.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        //workaround to pass inputText to FrequencyCount class
        triGraphs.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                triGraphs.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("TriGraphs", triGraphs.getMainCipherPanel());
//end of TriGraphs
//begin NGraphs
        nGraphs.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        nGraphs.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        //workaround to pass inputText to FrequencyCount class
        nGraphs.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                nGraphs.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("NGraphs", nGraphs.getMainCipherPanel());
//end of NGraphs
//begin affineKnown
        affineKnownPlaintextAttack.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        affineKnownPlaintextAttack.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        affineKnownPlaintextAttack.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                affineKnownPlaintextAttack.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Affine Known Plaintext Attack", affineKnownPlaintextAttack.getMainCipherPanel());
//end of affineKnown
//begin affineEncipher
        affineEncipher.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        affineEncipher.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        affineEncipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                affineEncipher.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Affine Encipher", affineEncipher.getMainCipherPanel());
        //end AffineEncipher
        //begin AffineDecipher


        affineDecipher.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        affineDecipher.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        affineDecipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                affineDecipher.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Affine Decipher", affineDecipher.getMainCipherPanel());

        //end affineDecipher
        //begin Split Off Alphabets

        splitOffAlphabets.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        splitOffAlphabets.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        splitOffAlphabets.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                splitOffAlphabets.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Split Off Alphabets", splitOffAlphabets.getMainCipherPanel());
//end split the alphabet
//begin PolyMonoCalculatro

        polyMonoCalculator.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        polyMonoCalculator.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        polyMonoCalculator.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                polyMonoCalculator.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Poly/Mono Calculator", polyMonoCalculator.getMainCipherPanel());
//end Poly/Mono Calculator
//begin Viginere Encipher

        viginereEncipher.getOutputTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        viginereEncipher.getOutputTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        viginereEncipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                viginereEncipher.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Viginere Encipher", viginereEncipher.getMainCipherPanel());
//end Vinigner Enciphe
//begin decipher
        viginereDecipher.getOutputTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        viginereDecipher.getOutputTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        viginereDecipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                viginereDecipher.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Viginere Decipher", viginereDecipher.getMainCipherPanel());
//end Viginere Decipher
//begin Viginere Brute Force

        viginereBruteForce.getOutputTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        viginereBruteForce.getOutputTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        viginereBruteForce.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                viginereBruteForce.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Viginere Brute Force", viginereBruteForce.getMainCipherPanel());
//end Viginere Brute Force
//begin AutoKey Cypyhertext Attack
        autoKeyCyphertextAttack.getOutputTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        autoKeyCyphertextAttack.getOutputTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        autoKeyCyphertextAttack.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                autoKeyCyphertextAttack.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("AutoKey Cyphertext Attack", autoKeyCyphertextAttack.getMainCipherPanel());
//end autokey cypehertext attack
//begin plaintext attack
        autoKeyPlaintextAttack.getOutputTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        autoKeyPlaintextAttack.getOutputTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        autoKeyPlaintextAttack.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                autoKeyPlaintextAttack.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("AutoKey Plaintext Attack", autoKeyPlaintextAttack.getMainCipherPanel());
//end AutoKey Plaintext Attack
//begin autokey decipher

        autoKeyDecipher.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                autoKeyDecipher.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("AutoKey Decipher", autoKeyDecipher.getMainCipherPanel());
//end autoKey decipher
//begin hill brute force


        hillBruteForce.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        hillBruteForce.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        hillBruteForce.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                hillBruteForce.setInputText(inputText);
            }
        });


        rightHandNavPanelTab.addTab("Hill Brute Force", hillBruteForce.getMainCipherPanel());
//end hill brute force
//begin column transpotions

        columnTranspositionWorksheet.getGoButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                columnTranspositionWorksheet.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("Column Transposition Worksheet", columnTranspositionWorksheet.getMainPanel());
//end transposiotion
//begin GCD

        gcdAndInverse.getMainCipherTextArea().addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        gcdAndInverse.getMainCipherTextArea().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        gcdAndInverse.getActionButton().addActionListener( new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                gcdAndInverse.setInputText(inputText);
            }
        });

        rightHandNavPanelTab.addTab("GCD and Inverse", gcdAndInverse.getMainCipherPanel());
//end GCD
        jPanel47.setLayout(new BorderLayout());

        jPanel47.addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                jPanel47ComponentShown(evt);
            }
        });

        jLabel21.setText("Dictionary File: ");
        jToolBar1.add(jLabel21);

        jToolBar1.add(jTextField11);

        jButton21.setText("Browse");
        jToolBar1.add(jButton21);

        jButton22.setText("Generate");
        jToolBar1.add(jButton22);

        jPanel47.add(jToolBar1, BorderLayout.NORTH);

        jButton20.setText("Go");
        jButton20.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jPanel47.add(jButton20, BorderLayout.SOUTH);

        jTextArea21.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                jTextAreaKeyReleased(evt);
            }
        });
        jTextArea21.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });

        jScrollPane28.setViewportView(jTextArea21);

        jPanel47.add(jScrollPane28, BorderLayout.CENTER);

        rightHandNavPanelTab.addTab("Substitution Solver", jPanel47);

        jPanel17.setLayout(new BorderLayout());

        jPanel17.addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                jPanel17ComponentShown(evt);
            }
        });


        jScrollPane10.setViewportView(termsOfTheGPL.getTermsOfTheGPLTextArea());

        jPanel17.add(jScrollPane10, BorderLayout.CENTER);

        rightHandNavPanelTab.addTab("Terms of the GPL", jPanel17);

        jSplitPane1.setBottomComponent(rightHandNavPanelTab);

        getContentPane().add(jSplitPane1, BorderLayout.CENTER);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-600)/2, 800, 600);
    }
    // </editor-fold>//GEN-END:initComponents

    private void jPanel47ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel47ComponentShown
        try
        {            
            JarFile jf = new JarFile("MainToBeRenamed.CryptoHelper.jar");
            
            ZipEntry ze = jf.getEntry("english.wow");
            
            BufferedReader br = new BufferedReader(new InputStreamReader(jf.getInputStream(ze)));
            dictionary = new int[26][26][26][26];

            for(int x = 0; x < 26; x++)
            {
                for (int y = 0; y < 26; y++)
                {
                    for(int l = 0; l < 26; l++)
                    {
                        for(int r = 0; r < 26; r++)
                        {
                            dictionary[x][y][l][r] = 1;
                        }
                    }
                }
            }        
            String temp = "";
            while ((temp = br.readLine()) != null)
            {
                String[] parse = temp.split(", ");
                dictionary[parse[0].charAt(0)-65][parse[0].charAt(1)-65][parse[0].charAt(2)-65][parse[0].charAt(3)-65] = Integer.parseInt(parse[1]);
            }
        }
        catch (IOException e)
        {
            JOptionPane.showMessageDialog(null,
            "Error:Cannot read from file.\n");
        }
    }//GEN-LAST:event_jPanel47ComponentShown
    
    class SubstitutionSolver implements Runnable
    {
        String ciphertext;
        long iteration = 0;
        char[] key;
        boolean stopToggle = false;
        
        public void stop()
        {
            stopToggle = true;
        }
        
        public SubstitutionSolver(String ciphertext)                               // this is the classes constructor
        {
            this.ciphertext = ciphertext;
            key = new char[256];
        }

        public void run()                                                           // this is the "main" method of the thread
        {
            jTextArea21.setText("best overall = " + score(ciphertext) + " : best score = " + score(ciphertext) + "\n");
            
//            jTextArea21.append("" + ciphertext.replaceAll("/(.....)/", '\1 ');
            
            randomize(key);
            
            double bestScore = score(ciphertext);
            double bestOverall = bestScore - 1;
            int numSmallAdjusts = 0;

            int bestI = 0;
            int bestJ = 0;
            
            
            while(true)
            {
                if (stopToggle) return;
//                jTextArea21.append("");
                
                double bestAdj = bestScore;
                
                char[] testKey = new char[256];
                

                for (int i = 0; i < 26; i++)
                {
                    for (int j = i+1; j < 26; j++)
                    {
                        for (int x = 0; x < 256; x++) testKey[x] = key[x];
                        char temp = testKey[i+65];
                        testKey[i+65] = testKey[j+65];
                        testKey[j+65] = temp;

                        double sc = score(plaintext(ciphertext, testKey));
                        
//                        for (int l = 0; l < 26; l++) jTextArea21.append("" + testKey[l+65] + ", ");
//                        jTextArea21.append("\n" + score(plaintext(ciphertext, testKey)) + "\n");
//                        jTextArea21.append("\n");
//                        for (int l = 0; l < 26; l++) jTextArea21.append("" + key[l+65] + ", ");
//                        jTextArea21.append("" + score(plaintext(ciphertext, key)) + "\n");
//                        jTextArea21.append("\n\n");
                        
                        if (sc > bestAdj)
                        {
                            bestAdj = sc;
                            bestI = i;
                            bestJ = j;
                        }
                    }
                }
                
                if (bestAdj > bestScore)
                {
                    char temp = key[bestI+65];
                    key[bestI+65] = key[bestJ+65];
                    key[bestJ+65] = temp;
                    bestScore = bestAdj;
                    if (bestScore > bestOverall)
                    {
                        numSmallAdjusts = 0;
                        bestOverall = bestScore;
                        jTextArea21.setText("best overall = " + bestOverall + " : best score = " + bestScore + " : iteration = " + iteration + "\n");
                        jTextArea21.append("" + plaintext(ciphertext, key)/*.gsub(/(.....)/, '\1 '*/ + "\n");
                    }
                }
                else
                {
                    if (numSmallAdjusts < 5)
                    {
                        smallAdj(key);
                        numSmallAdjusts += 1;
                    }
                    else
                    {
                        randomize(key);
                        numSmallAdjusts = 0;
                    }
                    bestScore=score(plaintext(ciphertext, key));
                }
            }
        }                                                                       // thread is terminating.
        
        private double score(String string)
        {
            iteration += 1;
            double tally = 0;
            
            for (int x = 0; x < string.length() - 4; x++)
            {
                tally += Math.log((dictionary[string.charAt(x)-65][string.charAt(x+1)-65][string.charAt(x+2)-65][string.charAt(x+3)-65]));
            }
            return tally;
        }
        
        private void smallAdj(char[] key)
        {
            int rNum = (int)(Math.random() * 5);
            
            for (int i = 0; i < rNum; i++)
            {
                int j = (int)(Math.random() * 26);
                int k = (int)(Math.random() * 26);
                
                if (j!=k)
                {
			char temp = key[j+65];
			key[j+65] = key[k+65];
			key[k+65] = temp;
                }
            }
        }
        
        private String plaintext(String ciphertext, char[] key)
        {
            String returnString = "";
            
            for (int x = 0; x < ciphertext.length(); x++)
            {
                returnString = returnString + key[ciphertext.charAt(x)];
            }
            return returnString;
        }
        
        private void randomize(char[] key)
        {
            ArrayList array = new ArrayList();
            
            for (int x = 0; x < 26; x++)
            {
                array.add(x, new Character((char)(x + 65)));
            }
            
            for (int x = 0; x < 26; x++)
            {
                int y = (int)(Math.random() * array.size());
                key[x+65] = ((Character)array.get(y)).charValue();
                array.remove(y);
            }
        }
    }
    
    boolean jButton20Toggle = false;
    Thread substitutionThread;
    SubstitutionSolver substitutionSolver;

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        if (jButton20Toggle == false)
        {
            String inputString = cipherService.formatString(inputText);
            substitutionSolver = new SubstitutionSolver(inputString);
            substitutionThread = new Thread(substitutionSolver);
            substitutionThread.start();
            jButton20Toggle = true;
            jButton20.setText("Stop");
        }
        else
        {
            substitutionSolver.stop();
            jButton20Toggle = false;
            jButton20.setText("Go");
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButttonOpenFileActionPerformed(java.awt.event.ActionEvent evt) throws IOException {


        final JFileChooser fc = new JFileChooser();

//In response to a button click:
        int returnVal = fc.showOpenDialog(null);

        String inputFile = fc.getSelectedFile().getPath();

        String intmandun = " ";

        try {
            intmandun = new String(Files.readAllBytes(Paths.get(inputFile)));
        } catch (IOException e) {
            e.printStackTrace();
        }

//        String lines = Files.readAllLines(Paths.get(inputFile));
//        String intman = lines;
        String inputString = intmandun;
        inputText.setText(inputString);
    }


    private void jPanel17ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel17ComponentShown
        jScrollPane10.getVerticalScrollBar().setValue(0);
    }//GEN-LAST:event_jPanel17ComponentShown

    private void jTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaKeyReleased
        if (evt.isControlDown())
        {
            if (evt.getKeyCode()== KeyEvent.VK_F)
            {
                performSearch((JTextArea)evt.getSource());
            }
            else if (evt.getKeyCode()== KeyEvent.VK_G)
            {
                performSearchAgain((JTextArea)evt.getSource());
            }
        }
    }//GEN-LAST:event_jTextAreaKeyReleased
    private void performSearch(JTextArea j)
    {
            Caret c = j.getCaret();
            String str = j.getText();
            str = str.toUpperCase();
            searchStr = JOptionPane.showInputDialog("Please input a string to search for.", searchStr);
            searchStr = searchStr.toUpperCase();
            int x = str.indexOf(searchStr, c.getDot());
            c.setDot(x);
            if(x>=0)
            {
                c.moveDot(c.getDot() + searchStr.length());
                c.setSelectionVisible(true);
            }            
    }
    private void performSearchAgain(JTextArea j)
    {
            Caret c = j.getCaret();
            String str = j.getText();
            str = str.toUpperCase();
            int x = str.indexOf(searchStr, c.getDot());
            c.setDot(x);
            if(x>=0)
            {
                c.moveDot(c.getDot() + searchStr.length());
                c.setSelectionVisible(true);
            }            
    }
    private void jTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMouseClicked
        if (evt.getButton()== MouseEvent.BUTTON3)
        {
            jPopupMenu1.show((JTextArea)evt.getSource(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextAreaMouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        performSearchAgain((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker());
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        performSearch((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker());
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker()).paste();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ((JTextArea)((JPopupMenu)((JMenuItem)evt.getSource()).getParent()).getInvoker()).copy();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptoHelper().setVisible(true);
            }
        });
    }


    private String searchStr;
    private int[][][][] dictionary;
    // Variables declaration - do not modify//GEN-BEGIN:variables

    private CipherService cipherService = new CipherServiceImpl();

    private TermsOfTheGPL termsOfTheGPL;
    private FrequencyCount frequencyCount;
    private RunTheAlphabet runTheAlphabet;
    private BiGraphs biGraphs;
    private TriGraphs triGraphs;
    private NGraphs nGraphs;
    private AffineKnownPlaintextAttack affineKnownPlaintextAttack;
    private AffineEncipherDecipher affineEncipher;
    private AffineEncipherDecipher affineDecipher;
    private SplitOffAlphabets splitOffAlphabets;
    private PolyMonoCalculator polyMonoCalculator;
    private ViginereEncipher viginereEncipher;
    private ViginereDecipher viginereDecipher;
    private ViginereBruteForce viginereBruteForce;
    private AutoKeyCyphertextAttack autoKeyCyphertextAttack;
    private AutoKeyPlaintextAttack autoKeyPlaintextAttack;
    private AutoKeyDecipher autoKeyDecipher;
    private HillBruteForce hillBruteForce;
    private ColumnTranspositionWorksheet columnTranspositionWorksheet;
    private GCDAndInverse gcdAndInverse;

    private encryptPL pigLatinEncipher;
    private decryptPL pigLatinDecipher;

    private encryptKW encryptkw;
    private decryptKW decryptkw;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;

    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;

    private javax.swing.JButton jbuttonOpenFile;

    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane rightHandNavPanelTab;
    private javax.swing.JTextArea inputText;
    private javax.swing.JTextArea jTextArea20;
    private javax.swing.JTextArea jTextArea21;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
